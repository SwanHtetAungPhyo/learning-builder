// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: models.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlockchainService_ProposeBlockCall_FullMethodName         = "/common.BlockchainService/ProposeBlockCall"
	BlockchainService_GetChainMetadata_FullMethodName         = "/common.BlockchainService/GetChainMetadata"
	BlockchainService_GetBlockByHash_FullMethodName           = "/common.BlockchainService/GetBlockByHash"
	BlockchainService_GetLatestBlock_FullMethodName           = "/common.BlockchainService/GetLatestBlock"
	BlockchainService_GetBlocks_FullMethodName                = "/common.BlockchainService/GetBlocks"
	BlockchainService_GetTransactionByHash_FullMethodName     = "/common.BlockchainService/GetTransactionByHash"
	BlockchainService_GetTransactionsByAddress_FullMethodName = "/common.BlockchainService/GetTransactionsByAddress"
	BlockchainService_GetFullChainState_FullMethodName        = "/common.BlockchainService/GetFullChainState"
	BlockchainService_ValidateChain_FullMethodName            = "/common.BlockchainService/ValidateChain"
)

// BlockchainServiceClient is the client API for BlockchainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainServiceClient interface {
	// Block proposal
	ProposeBlockCall(ctx context.Context, in *ProposeBlockRequest, opts ...grpc.CallOption) (*ProposeBlockResponse, error)
	// Chain state queries
	GetChainMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChainMetadata, error)
	GetBlockByHash(ctx context.Context, in *TransactionQuery, opts ...grpc.CallOption) (*Block, error)
	GetLatestBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Block, error)
	GetBlocks(ctx context.Context, in *BlockRangeRequest, opts ...grpc.CallOption) (*BlockListResponse, error)
	// Transaction queries
	GetTransactionByHash(ctx context.Context, in *TransactionQuery, opts ...grpc.CallOption) (*Tx, error)
	GetTransactionsByAddress(ctx context.Context, in *TransactionQuery, opts ...grpc.CallOption) (*TransactionListResponse, error)
	GetFullChainState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RawChainState, error)
	// Validation
	ValidateChain(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChainValidationResponse, error)
}

type blockchainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainServiceClient(cc grpc.ClientConnInterface) BlockchainServiceClient {
	return &blockchainServiceClient{cc}
}

func (c *blockchainServiceClient) ProposeBlockCall(ctx context.Context, in *ProposeBlockRequest, opts ...grpc.CallOption) (*ProposeBlockResponse, error) {
	out := new(ProposeBlockResponse)
	err := c.cc.Invoke(ctx, BlockchainService_ProposeBlockCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetChainMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChainMetadata, error) {
	out := new(ChainMetadata)
	err := c.cc.Invoke(ctx, BlockchainService_GetChainMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetBlockByHash(ctx context.Context, in *TransactionQuery, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, BlockchainService_GetBlockByHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetLatestBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, BlockchainService_GetLatestBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetBlocks(ctx context.Context, in *BlockRangeRequest, opts ...grpc.CallOption) (*BlockListResponse, error) {
	out := new(BlockListResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetTransactionByHash(ctx context.Context, in *TransactionQuery, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := c.cc.Invoke(ctx, BlockchainService_GetTransactionByHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetTransactionsByAddress(ctx context.Context, in *TransactionQuery, opts ...grpc.CallOption) (*TransactionListResponse, error) {
	out := new(TransactionListResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetTransactionsByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetFullChainState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RawChainState, error) {
	out := new(RawChainState)
	err := c.cc.Invoke(ctx, BlockchainService_GetFullChainState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) ValidateChain(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChainValidationResponse, error) {
	out := new(ChainValidationResponse)
	err := c.cc.Invoke(ctx, BlockchainService_ValidateChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServiceServer is the server API for BlockchainService service.
// All implementations must embed UnimplementedBlockchainServiceServer
// for forward compatibility
type BlockchainServiceServer interface {
	// Block proposal
	ProposeBlockCall(context.Context, *ProposeBlockRequest) (*ProposeBlockResponse, error)
	// Chain state queries
	GetChainMetadata(context.Context, *Empty) (*ChainMetadata, error)
	GetBlockByHash(context.Context, *TransactionQuery) (*Block, error)
	GetLatestBlock(context.Context, *Empty) (*Block, error)
	GetBlocks(context.Context, *BlockRangeRequest) (*BlockListResponse, error)
	// Transaction queries
	GetTransactionByHash(context.Context, *TransactionQuery) (*Tx, error)
	GetTransactionsByAddress(context.Context, *TransactionQuery) (*TransactionListResponse, error)
	GetFullChainState(context.Context, *Empty) (*RawChainState, error)
	// Validation
	ValidateChain(context.Context, *Empty) (*ChainValidationResponse, error)
	mustEmbedUnimplementedBlockchainServiceServer()
}

// UnimplementedBlockchainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlockchainServiceServer struct {
}

func (UnimplementedBlockchainServiceServer) ProposeBlockCall(context.Context, *ProposeBlockRequest) (*ProposeBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeBlockCall not implemented")
}
func (UnimplementedBlockchainServiceServer) GetChainMetadata(context.Context, *Empty) (*ChainMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainMetadata not implemented")
}
func (UnimplementedBlockchainServiceServer) GetBlockByHash(context.Context, *TransactionQuery) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (UnimplementedBlockchainServiceServer) GetLatestBlock(context.Context, *Empty) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlock not implemented")
}
func (UnimplementedBlockchainServiceServer) GetBlocks(context.Context, *BlockRangeRequest) (*BlockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedBlockchainServiceServer) GetTransactionByHash(context.Context, *TransactionQuery) (*Tx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (UnimplementedBlockchainServiceServer) GetTransactionsByAddress(context.Context, *TransactionQuery) (*TransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByAddress not implemented")
}
func (UnimplementedBlockchainServiceServer) GetFullChainState(context.Context, *Empty) (*RawChainState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullChainState not implemented")
}
func (UnimplementedBlockchainServiceServer) ValidateChain(context.Context, *Empty) (*ChainValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateChain not implemented")
}
func (UnimplementedBlockchainServiceServer) mustEmbedUnimplementedBlockchainServiceServer() {}

// UnsafeBlockchainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainServiceServer will
// result in compilation errors.
type UnsafeBlockchainServiceServer interface {
	mustEmbedUnimplementedBlockchainServiceServer()
}

func RegisterBlockchainServiceServer(s grpc.ServiceRegistrar, srv BlockchainServiceServer) {
	s.RegisterService(&BlockchainService_ServiceDesc, srv)
}

func _BlockchainService_ProposeBlockCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).ProposeBlockCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_ProposeBlockCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).ProposeBlockCall(ctx, req.(*ProposeBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetChainMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetChainMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetChainMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetChainMetadata(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetBlockByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetBlockByHash(ctx, req.(*TransactionQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetLatestBlock(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetBlocks(ctx, req.(*BlockRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetTransactionByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetTransactionByHash(ctx, req.(*TransactionQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetTransactionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetTransactionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetTransactionsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetTransactionsByAddress(ctx, req.(*TransactionQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetFullChainState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetFullChainState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetFullChainState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetFullChainState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_ValidateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).ValidateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_ValidateChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).ValidateChain(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainService_ServiceDesc is the grpc.ServiceDesc for BlockchainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.BlockchainService",
	HandlerType: (*BlockchainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeBlockCall",
			Handler:    _BlockchainService_ProposeBlockCall_Handler,
		},
		{
			MethodName: "GetChainMetadata",
			Handler:    _BlockchainService_GetChainMetadata_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _BlockchainService_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetLatestBlock",
			Handler:    _BlockchainService_GetLatestBlock_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _BlockchainService_GetBlocks_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _BlockchainService_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionsByAddress",
			Handler:    _BlockchainService_GetTransactionsByAddress_Handler,
		},
		{
			MethodName: "GetFullChainState",
			Handler:    _BlockchainService_GetFullChainState_Handler,
		},
		{
			MethodName: "ValidateChain",
			Handler:    _BlockchainService_ValidateChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models.proto",
}
